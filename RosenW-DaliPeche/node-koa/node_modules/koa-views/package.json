{
  "_from": "koa-views",
  "_id": "koa-views@6.1.4",
  "_inBundle": false,
  "_integrity": "sha512-se1YqI2zlUT6AHfm4vL/Q1ymeTBg7g9gv8YYlSfKG+j0cwQy/qljYLmihnZZ4dB7kGIL3KvJWZfNNaQiIq7qcw==",
  "_location": "/koa-views",
  "_phantomChildren": {
    "http-errors": "1.6.3",
    "ms": "2.0.0",
    "mz": "2.7.0",
    "resolve-path": "1.4.0"
  },
  "_requested": {
    "escapedName": "koa-views",
    "fetchSpec": "latest",
    "name": "koa-views",
    "raw": "koa-views",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/koa-views/-/koa-views-6.1.4.tgz",
  "_shasum": "595eb683ca17d8dfaa1d100b42ba4e34c762154d",
  "_spec": "koa-views",
  "_where": "/home/ros/Desktop/repo/RosenW-DaliPeche/node-koa",
  "author": {
    "name": "queckezz"
  },
  "bugs": {
    "url": "https://github.com/queckezz/koa-views/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "consolidate": "^0.15.0",
    "debug": "^3.1.0",
    "get-paths": "^0.0.2",
    "koa-send": "^4.0.0",
    "mz": "^2.4.0",
    "pretty": "^2.0.0"
  },
  "deprecated": false,
  "description": "Template rendering middleware for koa",
  "devDependencies": {
    "ejs": "^2.4.1",
    "eslint": "^4.7.2",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "handlebars": "^4.0.5",
    "koa": "^2.0.0-alpha.3",
    "mocha": "^3.5.3",
    "nunjucks": "^3.0.0",
    "pre-commit": "^1.2.2",
    "pug": "^2.0.0-rc.4",
    "should": "^13.1.0",
    "supertest": "^3.0.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.4.0",
    "underscore": "^1.8.3",
    "xyz": "^2.1.0"
  },
  "homepage": "https://github.com/queckezz/koa-views#readme",
  "keywords": [
    "app-wide",
    "koa",
    "render",
    "templates",
    "templating",
    "views"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "koa-views",
  "optionalDependencies": {},
  "precommit": "lint, test",
  "readme": "# koa-views\n\n[![Build status][travis-image]][travis-url]\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][npm-downloads-image]][npm-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n\nTemplate rendering middleware for `koa@2`.\n\n## Installation\n\n```sh\nnpm install koa-views\n```\n\n## Templating engines\n\n`koa-views` is using [consolidate](https://github.com/tj/consolidate.js) under the hood.\n\n[List of supported engines](https://github.com/tj/consolidate.js#supported-template-engines)\n\n## Example\n\n```js\nvar views = require('koa-views');\n\n// Must be used before any router is used\napp.use(views(__dirname + '/views', {\n  map: {\n    html: 'underscore'\n  }\n}));\n\napp.use(async function (ctx, next) {\n  ctx.state = {\n    session: this.session,\n    title: 'app'\n  };\n\n  await ctx.render('user', {\n    user: 'John'\n  });\n});\n```\n\nFor more examples you can take a look at the [tests](./test/index.js).\n\n## Simple middleware\n\nIf you need to simply render pages with locals, you can install `koa-views-render`:\n\n```sh\nnpm install koa-views-render\n```\n\nThen simply use it on your routes and its arguments will be passed to `ctx.render`.\n\n```js\nvar render = require('koa-views-render');\n\n// ...\n\napp.use(render('home', { title : 'Home Page' });\n```\n\n## API\n\n#### `views(root, opts)`\n\n* `root`: Where your views are located. Must be an absolute path. All rendered views are relative to this path\n* `opts` (optional)\n* `opts.extension`: Default extension for your views\n\nInstead of providing the full file extension you can omit it.\n```js\napp.use(async function (ctx) {\n  await ctx.render('user.pug')\n})\n```\n\nvs.\n\n```js\napp.use(views(__dirname, { extension: 'pug' }))\n\napp.use(async function (ctx) {\n  await ctx.render('user')\n})\n```\n\n* `opts.map`: Map a file extension to an engine\n\nIn this example, each file ending with `.html` will get rendered using the `nunjucks` templating engine.\n```js\napp.use(views(__dirname, { map: {html: 'nunjucks' }}))\n\n// render `user.html` with nunjucks\napp.use(async function (ctx) {\n  await ctx.render('user.html')\n})\n```\n\n* `opts.engineSource`: replace consolidate as default engine source\n\nIf youâ€™re not happy with consolidate or want more control over the engines, you can override it with this options. `engineSource` should\nbe an object that maps an extension to a function that receives a path and options and returns a promise. In this example templates with the `foo` extension will always return `bar`.\n\n```js\napp.use(views(__dirname, { engineSource: {foo: () => Promise.resolve('bar')}}))\n\napp.use(async function (ctx) {\n  await ctx.render('index.foo')\n})\n```\n\n* `opts.options`: These options will get passed to the view engine. This is the time to add `partials` and `helpers` etc.\n\n```js\nconst app = new Koa()\n  .use(views(__dirname, {\n    map: { hbs: 'handlebars' },\n    options: {\n      helpers: {\n        uppercase: (str) => str.toUpperCase()\n      },\n\n      partials: {\n        subTitle: './my-partial' // requires ./my-partial.hbs\n      }\n    }\n  }))\n  .use(function (ctx) {\n    ctx.state = { title: 'my title', author: 'queckezz' }\n    return ctx.render('./my-view.hbs')\n  })\n```\n\n## Debug\n\nSet the `DEBUG` environment variable to `koa-views` when starting your server.\n\n```bash\n$ DEBUG=koa-views\n```\n\n## License\n\n[MIT](./license)\n\n[travis-image]: https://img.shields.io/travis/queckezz/koa-views.svg?style=flat-square\n[travis-url]: https://travis-ci.org/queckezz/koa-views\n[npm-image]: https://img.shields.io/npm/v/koa-views.svg?style=flat-square\n[npm-downloads-image]: https://img.shields.io/npm/dm/koa-views.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-views\n[david-image]: http://img.shields.io/david/queckezz/koa-views.svg?style=flat-square\n[david-url]: https://david-dm.org/queckezz/koa-views\n[license-image]: http://img.shields.io/npm/l/koa-views.svg?style=flat-square\n[license-url]: ./license\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/queckezz/koa-views.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "mocha --reporter dot --bail",
    "xyz": "xyz"
  },
  "version": "6.1.4"
}
